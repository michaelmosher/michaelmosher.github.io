import { a as assign, b as protoDev, c as init, d as createElement, e as createText, f as claimElement, g as children, h as claimText, i as detachNode, j as addLoc, r as setAttribute, k as insert, l as append, q as setData, m as noop, s as reinsertChildren, o as flush, t as createFragment } from './chunk.1e96a287.js';

/* src/components/Intro.svelte generated by Svelte v2.16.0 */

const file = "src/components/Intro.svelte";

function create_main_fragment(component, ctx) {
	var section, text0, div1, div0, text1, text2, p0, text3, text4, p1, text5, text6, dl, dt0, text7, dd0, a0, text8, dt1, text9, dd1, a1, text10;

	function onwindowresize(event) {
		component._updatingReadonlyProperty = true;

		component.set({ x: this.innerWidth });

		component._updatingReadonlyProperty = false;
	}
	window.addEventListener("resize", onwindowresize);

	var if_block = ((ctx.x && ctx.x > 800)) && create_if_block(component, ctx);

	return {
		c: function create() {
			section = createElement("section");
			if (if_block) if_block.c();
			text0 = createText("\n\t");
			div1 = createElement("div");
			div0 = createElement("div");
			text1 = createText("Well Met!");
			text2 = createText("\n\t\t");
			p0 = createElement("p");
			text3 = createText("Hello, I'm Michael. I'm a software engineer and mobile developer.");
			text4 = createText("\n\t\t");
			p1 = createElement("p");
			text5 = createText("I'm known by my colleagues as a versatile, efficient, and reliable person to work with. I do my best work collaborating\n\t\t\twith my team toward a common goal.");
			text6 = createText("\n\t\t");
			dl = createElement("dl");
			dt0 = createElement("dt");
			text7 = createText("Email");
			dd0 = createElement("dd");
			a0 = createElement("a");
			text8 = createText("mmosher47@gmail.com");
			dt1 = createElement("dt");
			text9 = createText("Social");
			dd1 = createElement("dd");
			a1 = createElement("a");
			text10 = createText("LinkedIn");
			this.h();
		},

		l: function claim(nodes) {
			section = claimElement(nodes, "SECTION", { role: true, class: true }, false);
			var section_nodes = children(section);

			if (if_block) if_block.l(section_nodes);
			text0 = claimText(section_nodes, "\n\t");

			div1 = claimElement(section_nodes, "DIV", { role: true, class: true }, false);
			var div1_nodes = children(div1);

			div0 = claimElement(div1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			text1 = claimText(div0_nodes, "Well Met!");
			div0_nodes.forEach(detachNode);
			text2 = claimText(div1_nodes, "\n\t\t");

			p0 = claimElement(div1_nodes, "P", {}, false);
			var p0_nodes = children(p0);

			text3 = claimText(p0_nodes, "Hello, I'm Michael. I'm a software engineer and mobile developer.");
			p0_nodes.forEach(detachNode);
			text4 = claimText(div1_nodes, "\n\t\t");

			p1 = claimElement(div1_nodes, "P", {}, false);
			var p1_nodes = children(p1);

			text5 = claimText(p1_nodes, "I'm known by my colleagues as a versatile, efficient, and reliable person to work with. I do my best work collaborating\n\t\t\twith my team toward a common goal.");
			p1_nodes.forEach(detachNode);
			text6 = claimText(div1_nodes, "\n\t\t");

			dl = claimElement(div1_nodes, "DL", { class: true }, false);
			var dl_nodes = children(dl);

			dt0 = claimElement(dl_nodes, "DT", { class: true }, false);
			var dt0_nodes = children(dt0);

			text7 = claimText(dt0_nodes, "Email");
			dt0_nodes.forEach(detachNode);

			dd0 = claimElement(dl_nodes, "DD", {}, false);
			var dd0_nodes = children(dd0);

			a0 = claimElement(dd0_nodes, "A", { href: true }, false);
			var a0_nodes = children(a0);

			text8 = claimText(a0_nodes, "mmosher47@gmail.com");
			a0_nodes.forEach(detachNode);
			dd0_nodes.forEach(detachNode);

			dt1 = claimElement(dl_nodes, "DT", { class: true }, false);
			var dt1_nodes = children(dt1);

			text9 = claimText(dt1_nodes, "Social");
			dt1_nodes.forEach(detachNode);

			dd1 = claimElement(dl_nodes, "DD", {}, false);
			var dd1_nodes = children(dd1);

			a1 = claimElement(dd1_nodes, "A", { href: true }, false);
			var a1_nodes = children(a1);

			text10 = claimText(a1_nodes, "LinkedIn");
			a1_nodes.forEach(detachNode);
			dd1_nodes.forEach(detachNode);
			dl_nodes.forEach(detachNode);
			div1_nodes.forEach(detachNode);
			section_nodes.forEach(detachNode);
			this.h();
		},

		h: function hydrate() {
			div0.className = "speech-bubble svelte-3pgr6x";
			addLoc(div0, file, 5, 2, 185);
			addLoc(p0, file, 6, 2, 230);
			addLoc(p1, file, 7, 2, 305);
			dt0.className = "svelte-3pgr6x";
			addLoc(dt0, file, 10, 3, 495);
			a0.href = "mailto:mmosher47@gmail.com";
			addLoc(a0, file, 11, 7, 517);
			addLoc(dd0, file, 11, 3, 513);
			dt1.className = "svelte-3pgr6x";
			addLoc(dt1, file, 12, 3, 586);
			a1.href = "https://linkedin.com/in/michael--mosher";
			addLoc(a1, file, 13, 7, 609);
			addLoc(dd1, file, 13, 3, 605);
			dl.className = "social svelte-3pgr6x";
			addLoc(dl, file, 9, 2, 472);
			setAttribute(div1, "role", "document");
			div1.className = "svelte-3pgr6x";
			addLoc(div1, file, 4, 1, 161);
			setAttribute(section, "role", "article");
			section.className = "svelte-3pgr6x";
			addLoc(section, file, 1, 0, 36);
		},

		m: function mount(target, anchor) {
			insert(target, section, anchor);
			if (if_block) if_block.m(section, null);
			append(section, text0);
			append(section, div1);
			append(div1, div0);
			append(div0, text1);
			append(div1, text2);
			append(div1, p0);
			append(p0, text3);
			append(div1, text4);
			append(div1, p1);
			append(p1, text5);
			append(div1, text6);
			append(div1, dl);
			append(dl, dt0);
			append(dt0, text7);
			append(dl, dd0);
			append(dd0, a0);
			append(a0, text8);
			append(dl, dt1);
			append(dt1, text9);
			append(dl, dd1);
			append(dd1, a1);
			append(a1, text10);
		},

		p: function update(changed, ctx) {
			if ((ctx.x && ctx.x > 800)) {
				if (!if_block) {
					if_block = create_if_block(component, ctx);
					if_block.c();
					if_block.m(section, text0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},

		d: function destroy(detach) {
			window.removeEventListener("resize", onwindowresize);

			if (detach) {
				detachNode(section);
			}

			if (if_block) if_block.d();
		}
	};
}

// (3:1) {#if (x && x > 800)}
function create_if_block(component, ctx) {
	var img;

	return {
		c: function create() {
			img = createElement("img");
			this.h();
		},

		l: function claim(nodes) {
			img = claimElement(nodes, "IMG", { src: true, alt: true, class: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detachNode);
			this.h();
		},

		h: function hydrate() {
			img.src = "michael-mosher.jpg";
			img.alt = "Michael Mosher Portrait - 2016";
			img.className = "svelte-3pgr6x";
			addLoc(img, file, 3, 1, 84);
		},

		m: function mount(target, anchor) {
			insert(target, img, anchor);
		},

		d: function destroy(detach) {
			if (detach) {
				detachNode(img);
			}
		}
	};
}

function Intro(options) {
	this._debugName = '<Intro>';
	if (!options || (!options.target && !options.root)) {
		throw new Error("'target' is a required option");
	}

	init(this, options);
	this._state = assign({}, options.data);
	this._state.x = window.innerWidth;
	if (!('x' in this._state)) console.warn("<Intro> was created without expected data property 'x'");
	this._intro = true;

	this._fragment = create_main_fragment(this, this._state);

	if (options.target) {
		var nodes = children(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(detachNode);
		this._mount(options.target, options.anchor);
	}
}

assign(Intro.prototype, protoDev);

Intro.prototype._checkReadOnly = function _checkReadOnly(newState) {
	if ('x' in newState && !this._updatingReadonlyProperty) throw new Error("<Intro>: Cannot set read-only property 'x'");
};

/* src/components/SectionHeader.svelte generated by Svelte v2.16.0 */

const file$1 = "src/components/SectionHeader.svelte";

function create_main_fragment$1(component, ctx) {
	var header, div, text;

	return {
		c: function create() {
			header = createElement("header");
			div = createElement("div");
			text = createText(ctx.name);
			this.h();
		},

		l: function claim(nodes) {
			header = claimElement(nodes, "HEADER", { class: true }, false);
			var header_nodes = children(header);

			div = claimElement(header_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			text = claimText(div_nodes, ctx.name);
			div_nodes.forEach(detachNode);
			header_nodes.forEach(detachNode);
			this.h();
		},

		h: function hydrate() {
			div.className = "svelte-1tgury2";
			addLoc(div, file$1, 1, 1, 10);
			header.className = "svelte-1tgury2";
			addLoc(header, file$1, 0, 0, 0);
		},

		m: function mount(target, anchor) {
			insert(target, header, anchor);
			append(header, div);
			append(div, text);
		},

		p: function update(changed, ctx) {
			if (changed.name) {
				setData(text, ctx.name);
			}
		},

		d: function destroy(detach) {
			if (detach) {
				detachNode(header);
			}
		}
	};
}

function SectionHeader(options) {
	this._debugName = '<SectionHeader>';
	if (!options || (!options.target && !options.root)) {
		throw new Error("'target' is a required option");
	}

	init(this, options);
	this._state = assign({}, options.data);
	if (!('name' in this._state)) console.warn("<SectionHeader> was created without expected data property 'name'");
	this._intro = true;

	this._fragment = create_main_fragment$1(this, this._state);

	if (options.target) {
		var nodes = children(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(detachNode);
		this._mount(options.target, options.anchor);
	}
}

assign(SectionHeader.prototype, protoDev);

SectionHeader.prototype._checkReadOnly = function _checkReadOnly(newState) {
};

/* src/components/WhiteBox.svelte generated by Svelte v2.16.0 */

const file$2 = "src/components/WhiteBox.svelte";

function create_main_fragment$2(component, ctx) {
	var section, slot_content_default = component._slotted.default;

	return {
		c: function create() {
			section = createElement("section");
			this.h();
		},

		l: function claim(nodes) {
			section = claimElement(nodes, "SECTION", { role: true, class: true }, false);
			var section_nodes = children(section);

			section_nodes.forEach(detachNode);
			this.h();
		},

		h: function hydrate() {
			setAttribute(section, "role", "article");
			section.className = "svelte-il8yzr";
			addLoc(section, file$2, 0, 0, 0);
		},

		m: function mount(target, anchor) {
			insert(target, section, anchor);

			if (slot_content_default) {
				append(section, slot_content_default);
			}
		},

		p: noop,

		d: function destroy(detach) {
			if (detach) {
				detachNode(section);
			}

			if (slot_content_default) {
				reinsertChildren(section, slot_content_default);
			}
		}
	};
}

function WhiteBox(options) {
	this._debugName = '<WhiteBox>';
	if (!options || (!options.target && !options.root)) {
		throw new Error("'target' is a required option");
	}

	init(this, options);
	this._state = assign({}, options.data);
	this._intro = true;

	this._slotted = options.slots || {};

	this._fragment = create_main_fragment$2(this, this._state);

	if (options.target) {
		var nodes = children(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(detachNode);
		this._mount(options.target, options.anchor);
	}
}

assign(WhiteBox.prototype, protoDev);

WhiteBox.prototype._checkReadOnly = function _checkReadOnly(newState) {
};

/* src/components/Expertise.svelte generated by Svelte v2.16.0 */

const file$3 = "src/components/Expertise.svelte";

function create_main_fragment$3(component, ctx) {
	var text0, h40, text1, text2, ul0, li0, text3, text4, li1, text5, text6, h41, text7, text8, ul2, li2, text9, text10, li5, text11, ul1, li3, text12, text13, li4, text14;

	var sectionheader_initial_data = { name: "Expertise" };
	var sectionheader = new SectionHeader({
		root: component.root,
		store: component.store,
		data: sectionheader_initial_data
	});

	var whitebox = new WhiteBox({
		root: component.root,
		store: component.store,
		slots: { default: createFragment() }
	});

	return {
		c: function create() {
			sectionheader._fragment.c();
			text0 = createText("\n");
			h40 = createElement("h4");
			text1 = createText("Dev Expertise");
			text2 = createText("\n\t");
			ul0 = createElement("ul");
			li0 = createElement("li");
			text3 = createText("Node.js / JavaScript / TypeScript");
			text4 = createText("\n\t\t");
			li1 = createElement("li");
			text5 = createText("Golang");
			text6 = createText("\n\t");
			h41 = createElement("h4");
			text7 = createText("Ops Expertise");
			text8 = createText("\n\t");
			ul2 = createElement("ul");
			li2 = createElement("li");
			text9 = createText("Prepared and presented on Terraform to peers and leadership.");
			text10 = createText("\n\t\t");
			li5 = createElement("li");
			text11 = createText("AWS Certified\n\t\t\t");
			ul1 = createElement("ul");
			li3 = createElement("li");
			text12 = createText("Solutions Architect");
			text13 = createText("\n\t\t\t\t");
			li4 = createElement("li");
			text14 = createText("SysOps Administrator");
			whitebox._fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			sectionheader._fragment.l(nodes);
			text0 = claimText(nodes, "\n");

			h40 = claimElement(nodes, "H4", {}, false);
			var h40_nodes = children(h40);

			text1 = claimText(h40_nodes, "Dev Expertise");
			h40_nodes.forEach(detachNode);
			text2 = claimText(nodes, "\n\t");

			ul0 = claimElement(nodes, "UL", {}, false);
			var ul0_nodes = children(ul0);

			li0 = claimElement(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			text3 = claimText(li0_nodes, "Node.js / JavaScript / TypeScript");
			li0_nodes.forEach(detachNode);
			text4 = claimText(ul0_nodes, "\n\t\t");

			li1 = claimElement(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			text5 = claimText(li1_nodes, "Golang");
			li1_nodes.forEach(detachNode);
			ul0_nodes.forEach(detachNode);
			text6 = claimText(nodes, "\n\t");

			h41 = claimElement(nodes, "H4", {}, false);
			var h41_nodes = children(h41);

			text7 = claimText(h41_nodes, "Ops Expertise");
			h41_nodes.forEach(detachNode);
			text8 = claimText(nodes, "\n\t");

			ul2 = claimElement(nodes, "UL", {}, false);
			var ul2_nodes = children(ul2);

			li2 = claimElement(ul2_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			text9 = claimText(li2_nodes, "Prepared and presented on Terraform to peers and leadership.");
			li2_nodes.forEach(detachNode);
			text10 = claimText(ul2_nodes, "\n\t\t");

			li5 = claimElement(ul2_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			text11 = claimText(li5_nodes, "AWS Certified\n\t\t\t");

			ul1 = claimElement(li5_nodes, "UL", {}, false);
			var ul1_nodes = children(ul1);

			li3 = claimElement(ul1_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			text12 = claimText(li3_nodes, "Solutions Architect");
			li3_nodes.forEach(detachNode);
			text13 = claimText(ul1_nodes, "\n\t\t\t\t");

			li4 = claimElement(ul1_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			text14 = claimText(li4_nodes, "SysOps Administrator");
			li4_nodes.forEach(detachNode);
			ul1_nodes.forEach(detachNode);
			li5_nodes.forEach(detachNode);
			ul2_nodes.forEach(detachNode);
			whitebox._fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			addLoc(h40, file$3, 2, 1, 47);
			addLoc(li0, file$3, 4, 2, 78);
			addLoc(li1, file$3, 5, 2, 123);
			addLoc(ul0, file$3, 3, 1, 71);
			addLoc(h41, file$3, 7, 1, 147);
			addLoc(li2, file$3, 9, 2, 178);
			addLoc(li3, file$3, 13, 4, 284);
			addLoc(li4, file$3, 14, 4, 317);
			addLoc(ul1, file$3, 12, 3, 275);
			addLoc(li5, file$3, 10, 2, 250);
			addLoc(ul2, file$3, 8, 1, 171);
		},

		m: function mount(target, anchor) {
			sectionheader._mount(target, anchor);
			insert(target, text0, anchor);
			append(whitebox._slotted.default, h40);
			append(h40, text1);
			append(whitebox._slotted.default, text2);
			append(whitebox._slotted.default, ul0);
			append(ul0, li0);
			append(li0, text3);
			append(ul0, text4);
			append(ul0, li1);
			append(li1, text5);
			append(whitebox._slotted.default, text6);
			append(whitebox._slotted.default, h41);
			append(h41, text7);
			append(whitebox._slotted.default, text8);
			append(whitebox._slotted.default, ul2);
			append(ul2, li2);
			append(li2, text9);
			append(ul2, text10);
			append(ul2, li5);
			append(li5, text11);
			append(li5, ul1);
			append(ul1, li3);
			append(li3, text12);
			append(ul1, text13);
			append(ul1, li4);
			append(li4, text14);
			whitebox._mount(target, anchor);
		},

		p: noop,

		d: function destroy(detach) {
			sectionheader.destroy(detach);
			if (detach) {
				detachNode(text0);
			}

			whitebox.destroy(detach);
		}
	};
}

function Expertise(options) {
	this._debugName = '<Expertise>';
	if (!options || (!options.target && !options.root)) {
		throw new Error("'target' is a required option");
	}

	init(this, options);
	this._state = assign({}, options.data);
	this._intro = true;

	this._fragment = create_main_fragment$3(this, this._state);

	if (options.target) {
		var nodes = children(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(detachNode);
		this._mount(options.target, options.anchor);

		flush(this);
	}
}

assign(Expertise.prototype, protoDev);

Expertise.prototype._checkReadOnly = function _checkReadOnly(newState) {
};

/* src/components/Projects.svelte generated by Svelte v2.16.0 */

const file$4 = "src/components/Projects.svelte";

function create_main_fragment$4(component, ctx) {
	var text0, dl, dt0, text1, dd0, text2, dt1, text3, dd1, text4, dt2, text5, dd2, text6, dt3, text7, dd3, text8, dt4, text9, dd4, text10;

	var sectionheader_initial_data = { name: "Projects" };
	var sectionheader = new SectionHeader({
		root: component.root,
		store: component.store,
		data: sectionheader_initial_data
	});

	var whitebox = new WhiteBox({
		root: component.root,
		store: component.store,
		slots: { default: createFragment() }
	});

	return {
		c: function create() {
			sectionheader._fragment.c();
			text0 = createText("\n");
			dl = createElement("dl");
			dt0 = createElement("dt");
			text1 = createText("emBot");
			dd0 = createElement("dd");
			text2 = createText("This is a ChatOps bot that handles common IT tasks directly in Slack and Hangouts. It's built in TypeScript, using\n\t\t\tthe Slack API. It also utilizes AWS Lex, Amazon's natural language processor, to understand incoming IT requests.");
			dt1 = createElement("dt");
			text3 = createText("ZenossWeb");
			dd1 = createElement("dd");
			text4 = createText("A PWA written in Elm for interacting with Zenoss monitoring software. It lets you view and acknowledge active alerts\n\t\t\tand server metrics.");
			dt2 = createElement("dt");
			text5 = createText("Retrospective");
			dd2 = createElement("dd");
			text6 = createText("An Elm web app for facilitating a start/stop/continue retrospective session.");
			dt3 = createElement("dt");
			text7 = createText("Treader");
			dd3 = createElement("dd");
			text8 = createText("This is a CLI tool written in Golang for simplifying CSV time entries. This was built to create a smoother transition\n\t\t\tbetween Caato's Time Tracker and OpenAir's expected input.");
			dt4 = createElement("dt");
			text9 = createText("ActionTracker");
			dd4 = createElement("dd");
			text10 = createText("(Work in Progress) This is an Android Kotlin app that tracks frequency of recurring actions.");
			whitebox._fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			sectionheader._fragment.l(nodes);
			text0 = claimText(nodes, "\n");

			dl = claimElement(nodes, "DL", { role: true, class: true }, false);
			var dl_nodes = children(dl);

			dt0 = claimElement(dl_nodes, "DT", { class: true }, false);
			var dt0_nodes = children(dt0);

			text1 = claimText(dt0_nodes, "emBot");
			dt0_nodes.forEach(detachNode);

			dd0 = claimElement(dl_nodes, "DD", {}, false);
			var dd0_nodes = children(dd0);

			text2 = claimText(dd0_nodes, "This is a ChatOps bot that handles common IT tasks directly in Slack and Hangouts. It's built in TypeScript, using\n\t\t\tthe Slack API. It also utilizes AWS Lex, Amazon's natural language processor, to understand incoming IT requests.");
			dd0_nodes.forEach(detachNode);

			dt1 = claimElement(dl_nodes, "DT", { class: true }, false);
			var dt1_nodes = children(dt1);

			text3 = claimText(dt1_nodes, "ZenossWeb");
			dt1_nodes.forEach(detachNode);

			dd1 = claimElement(dl_nodes, "DD", {}, false);
			var dd1_nodes = children(dd1);

			text4 = claimText(dd1_nodes, "A PWA written in Elm for interacting with Zenoss monitoring software. It lets you view and acknowledge active alerts\n\t\t\tand server metrics.");
			dd1_nodes.forEach(detachNode);

			dt2 = claimElement(dl_nodes, "DT", { class: true }, false);
			var dt2_nodes = children(dt2);

			text5 = claimText(dt2_nodes, "Retrospective");
			dt2_nodes.forEach(detachNode);

			dd2 = claimElement(dl_nodes, "DD", {}, false);
			var dd2_nodes = children(dd2);

			text6 = claimText(dd2_nodes, "An Elm web app for facilitating a start/stop/continue retrospective session.");
			dd2_nodes.forEach(detachNode);

			dt3 = claimElement(dl_nodes, "DT", { class: true }, false);
			var dt3_nodes = children(dt3);

			text7 = claimText(dt3_nodes, "Treader");
			dt3_nodes.forEach(detachNode);

			dd3 = claimElement(dl_nodes, "DD", {}, false);
			var dd3_nodes = children(dd3);

			text8 = claimText(dd3_nodes, "This is a CLI tool written in Golang for simplifying CSV time entries. This was built to create a smoother transition\n\t\t\tbetween Caato's Time Tracker and OpenAir's expected input.");
			dd3_nodes.forEach(detachNode);

			dt4 = claimElement(dl_nodes, "DT", { class: true }, false);
			var dt4_nodes = children(dt4);

			text9 = claimText(dt4_nodes, "ActionTracker");
			dt4_nodes.forEach(detachNode);

			dd4 = claimElement(dl_nodes, "DD", {}, false);
			var dd4_nodes = children(dd4);

			text10 = claimText(dd4_nodes, "(Work in Progress) This is an Android Kotlin app that tracks frequency of recurring actions.");
			dd4_nodes.forEach(detachNode);
			dl_nodes.forEach(detachNode);
			whitebox._fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			dt0.className = "svelte-19fg82w";
			addLoc(dt0, file$4, 3, 2, 69);
			addLoc(dd0, file$4, 4, 2, 86);
			dt1.className = "svelte-19fg82w";
			addLoc(dt1, file$4, 6, 2, 329);
			addLoc(dd1, file$4, 7, 2, 350);
			dt2.className = "svelte-19fg82w";
			addLoc(dt2, file$4, 9, 2, 501);
			addLoc(dd2, file$4, 10, 2, 526);
			dt3.className = "svelte-19fg82w";
			addLoc(dt3, file$4, 11, 2, 614);
			addLoc(dd3, file$4, 12, 2, 633);
			dt4.className = "svelte-19fg82w";
			addLoc(dt4, file$4, 14, 2, 824);
			addLoc(dd4, file$4, 15, 2, 849);
			setAttribute(dl, "role", "document");
			dl.className = "svelte-19fg82w";
			addLoc(dl, file$4, 2, 1, 46);
		},

		m: function mount(target, anchor) {
			sectionheader._mount(target, anchor);
			insert(target, text0, anchor);
			append(whitebox._slotted.default, dl);
			append(dl, dt0);
			append(dt0, text1);
			append(dl, dd0);
			append(dd0, text2);
			append(dl, dt1);
			append(dt1, text3);
			append(dl, dd1);
			append(dd1, text4);
			append(dl, dt2);
			append(dt2, text5);
			append(dl, dd2);
			append(dd2, text6);
			append(dl, dt3);
			append(dt3, text7);
			append(dl, dd3);
			append(dd3, text8);
			append(dl, dt4);
			append(dt4, text9);
			append(dl, dd4);
			append(dd4, text10);
			whitebox._mount(target, anchor);
		},

		p: noop,

		d: function destroy(detach) {
			sectionheader.destroy(detach);
			if (detach) {
				detachNode(text0);
			}

			whitebox.destroy(detach);
		}
	};
}

function Projects(options) {
	this._debugName = '<Projects>';
	if (!options || (!options.target && !options.root)) {
		throw new Error("'target' is a required option");
	}

	init(this, options);
	this._state = assign({}, options.data);
	this._intro = true;

	this._fragment = create_main_fragment$4(this, this._state);

	if (options.target) {
		var nodes = children(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(detachNode);
		this._mount(options.target, options.anchor);

		flush(this);
	}
}

assign(Projects.prototype, protoDev);

Projects.prototype._checkReadOnly = function _checkReadOnly(newState) {
};

/* src/components/WorkHistory.svelte generated by Svelte v2.16.0 */

const file$5 = "src/components/WorkHistory.svelte";

function create_main_fragment$5(component, ctx) {
	var text0, section0, div0, span0, text1, text2, span1, text3, text4, div1, span2, text5, text6, span3, text7, text8, div2, span4, text9, text10, span5, text11, text12, section1, div3, span6, text13, text14, span7, text15, text16, div4, span8, text17, text18, span9, text19;

	var sectionheader_initial_data = { name: "Work History" };
	var sectionheader = new SectionHeader({
		root: component.root,
		store: component.store,
		data: sectionheader_initial_data
	});

	var whitebox = new WhiteBox({
		root: component.root,
		store: component.store,
		slots: { default: createFragment() }
	});

	return {
		c: function create() {
			sectionheader._fragment.c();
			text0 = createText("\n");
			section0 = createElement("section");
			div0 = createElement("div");
			span0 = createElement("span");
			text1 = createText("SpinDance, Inc");
			text2 = createText("\n\t\t\t");
			span1 = createElement("span");
			text3 = createText("Holland, MI");
			text4 = createText("\n\t\t");
			div1 = createElement("div");
			span2 = createElement("span");
			text5 = createText("Software Engineer");
			text6 = createText("\n\t\t\t");
			span3 = createElement("span");
			text7 = createText("May 2018 - present");
			text8 = createText("\n\t\t");
			div2 = createElement("div");
			span4 = createElement("span");
			text9 = createText("System Administrator");
			text10 = createText("\n\t\t\t");
			span5 = createElement("span");
			text11 = createText("August 2014 - May 2018");
			text12 = createText("\n\t");
			section1 = createElement("section");
			div3 = createElement("div");
			span6 = createElement("span");
			text13 = createText("Prince Conference Center");
			text14 = createText("\n\t\t\t");
			span7 = createElement("span");
			text15 = createText("Grand Rapids, MI");
			text16 = createText("\n\t\t");
			div4 = createElement("div");
			span8 = createElement("span");
			text17 = createText("Setup Crew");
			text18 = createText("\n\t\t\t");
			span9 = createElement("span");
			text19 = createText("October 2007 - September 2013");
			whitebox._fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			sectionheader._fragment.l(nodes);
			text0 = claimText(nodes, "\n");

			section0 = claimElement(nodes, "SECTION", { role: true, class: true }, false);
			var section0_nodes = children(section0);

			div0 = claimElement(section0_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			span0 = claimElement(div0_nodes, "SPAN", { class: true }, false);
			var span0_nodes = children(span0);

			text1 = claimText(span0_nodes, "SpinDance, Inc");
			span0_nodes.forEach(detachNode);
			text2 = claimText(div0_nodes, "\n\t\t\t");

			span1 = claimElement(div0_nodes, "SPAN", { class: true }, false);
			var span1_nodes = children(span1);

			text3 = claimText(span1_nodes, "Holland, MI");
			span1_nodes.forEach(detachNode);
			div0_nodes.forEach(detachNode);
			text4 = claimText(section0_nodes, "\n\t\t");

			div1 = claimElement(section0_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			span2 = claimElement(div1_nodes, "SPAN", {}, false);
			var span2_nodes = children(span2);

			text5 = claimText(span2_nodes, "Software Engineer");
			span2_nodes.forEach(detachNode);
			text6 = claimText(div1_nodes, "\n\t\t\t");

			span3 = claimElement(div1_nodes, "SPAN", { class: true }, false);
			var span3_nodes = children(span3);

			text7 = claimText(span3_nodes, "May 2018 - present");
			span3_nodes.forEach(detachNode);
			div1_nodes.forEach(detachNode);
			text8 = claimText(section0_nodes, "\n\t\t");

			div2 = claimElement(section0_nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			span4 = claimElement(div2_nodes, "SPAN", {}, false);
			var span4_nodes = children(span4);

			text9 = claimText(span4_nodes, "System Administrator");
			span4_nodes.forEach(detachNode);
			text10 = claimText(div2_nodes, "\n\t\t\t");

			span5 = claimElement(div2_nodes, "SPAN", { class: true }, false);
			var span5_nodes = children(span5);

			text11 = claimText(span5_nodes, "August 2014 - May 2018");
			span5_nodes.forEach(detachNode);
			div2_nodes.forEach(detachNode);
			section0_nodes.forEach(detachNode);
			text12 = claimText(nodes, "\n\t");

			section1 = claimElement(nodes, "SECTION", { role: true, class: true }, false);
			var section1_nodes = children(section1);

			div3 = claimElement(section1_nodes, "DIV", { class: true }, false);
			var div3_nodes = children(div3);

			span6 = claimElement(div3_nodes, "SPAN", { class: true }, false);
			var span6_nodes = children(span6);

			text13 = claimText(span6_nodes, "Prince Conference Center");
			span6_nodes.forEach(detachNode);
			text14 = claimText(div3_nodes, "\n\t\t\t");

			span7 = claimElement(div3_nodes, "SPAN", { class: true }, false);
			var span7_nodes = children(span7);

			text15 = claimText(span7_nodes, "Grand Rapids, MI");
			span7_nodes.forEach(detachNode);
			div3_nodes.forEach(detachNode);
			text16 = claimText(section1_nodes, "\n\t\t");

			div4 = claimElement(section1_nodes, "DIV", { class: true }, false);
			var div4_nodes = children(div4);

			span8 = claimElement(div4_nodes, "SPAN", {}, false);
			var span8_nodes = children(span8);

			text17 = claimText(span8_nodes, "Setup Crew");
			span8_nodes.forEach(detachNode);
			text18 = claimText(div4_nodes, "\n\t\t\t");

			span9 = claimElement(div4_nodes, "SPAN", { class: true }, false);
			var span9_nodes = children(span9);

			text19 = claimText(span9_nodes, "October 2007 - September 2013");
			span9_nodes.forEach(detachNode);
			div4_nodes.forEach(detachNode);
			section1_nodes.forEach(detachNode);
			whitebox._fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			span0.className = "svelte-1ydw844";
			addLoc(span0, file$5, 4, 3, 104);
			span1.className = "svelte-1ydw844";
			addLoc(span1, file$5, 5, 3, 135);
			div0.className = "employer svelte-1ydw844";
			addLoc(div0, file$5, 3, 2, 78);
			addLoc(span2, file$5, 8, 3, 192);
			span3.className = "dates svelte-1ydw844";
			addLoc(span3, file$5, 9, 3, 226);
			div1.className = "job svelte-1ydw844";
			addLoc(div1, file$5, 7, 2, 171);
			addLoc(span4, file$5, 12, 3, 304);
			span5.className = "dates svelte-1ydw844";
			addLoc(span5, file$5, 13, 3, 341);
			div2.className = "job svelte-1ydw844";
			addLoc(div2, file$5, 11, 2, 283);
			setAttribute(section0, "role", "document");
			section0.className = "svelte-1ydw844";
			addLoc(section0, file$5, 2, 1, 50);
			span6.className = "svelte-1ydw844";
			addLoc(span6, file$5, 18, 3, 467);
			span7.className = "svelte-1ydw844";
			addLoc(span7, file$5, 19, 3, 508);
			div3.className = "employer svelte-1ydw844";
			addLoc(div3, file$5, 17, 2, 441);
			addLoc(span8, file$5, 22, 3, 570);
			span9.className = "dates svelte-1ydw844";
			addLoc(span9, file$5, 23, 3, 597);
			div4.className = "job svelte-1ydw844";
			addLoc(div4, file$5, 21, 2, 549);
			setAttribute(section1, "role", "document");
			section1.className = "svelte-1ydw844";
			addLoc(section1, file$5, 16, 1, 413);
		},

		m: function mount(target, anchor) {
			sectionheader._mount(target, anchor);
			insert(target, text0, anchor);
			append(whitebox._slotted.default, section0);
			append(section0, div0);
			append(div0, span0);
			append(span0, text1);
			append(div0, text2);
			append(div0, span1);
			append(span1, text3);
			append(section0, text4);
			append(section0, div1);
			append(div1, span2);
			append(span2, text5);
			append(div1, text6);
			append(div1, span3);
			append(span3, text7);
			append(section0, text8);
			append(section0, div2);
			append(div2, span4);
			append(span4, text9);
			append(div2, text10);
			append(div2, span5);
			append(span5, text11);
			append(whitebox._slotted.default, text12);
			append(whitebox._slotted.default, section1);
			append(section1, div3);
			append(div3, span6);
			append(span6, text13);
			append(div3, text14);
			append(div3, span7);
			append(span7, text15);
			append(section1, text16);
			append(section1, div4);
			append(div4, span8);
			append(span8, text17);
			append(div4, text18);
			append(div4, span9);
			append(span9, text19);
			whitebox._mount(target, anchor);
		},

		p: noop,

		d: function destroy(detach) {
			sectionheader.destroy(detach);
			if (detach) {
				detachNode(text0);
			}

			whitebox.destroy(detach);
		}
	};
}

function WorkHistory(options) {
	this._debugName = '<WorkHistory>';
	if (!options || (!options.target && !options.root)) {
		throw new Error("'target' is a required option");
	}

	init(this, options);
	this._state = assign({}, options.data);
	this._intro = true;

	this._fragment = create_main_fragment$5(this, this._state);

	if (options.target) {
		var nodes = children(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(detachNode);
		this._mount(options.target, options.anchor);

		flush(this);
	}
}

assign(WorkHistory.prototype, protoDev);

WorkHistory.prototype._checkReadOnly = function _checkReadOnly(newState) {
};

/* src/routes/index.html generated by Svelte v2.16.0 */

function create_main_fragment$6(component, ctx) {
	var text0, text1, text2, text3;

	var intro = new Intro({
		root: component.root,
		store: component.store
	});

	var expertise = new Expertise({
		root: component.root,
		store: component.store
	});

	var projects = new Projects({
		root: component.root,
		store: component.store
	});

	var workhistory = new WorkHistory({
		root: component.root,
		store: component.store
	});

	return {
		c: function create() {
			text0 = createText("\n\n");
			intro._fragment.c();
			text1 = createText("\n");
			expertise._fragment.c();
			text2 = createText("\n");
			projects._fragment.c();
			text3 = createText("\n");
			workhistory._fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			text0 = claimText(nodes, "\n\n");
			intro._fragment.l(nodes);
			text1 = claimText(nodes, "\n");
			expertise._fragment.l(nodes);
			text2 = claimText(nodes, "\n");
			projects._fragment.l(nodes);
			text3 = claimText(nodes, "\n");
			workhistory._fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "Michael Mosher | Software Engineer";
		},

		m: function mount(target, anchor) {
			insert(target, text0, anchor);
			intro._mount(target, anchor);
			insert(target, text1, anchor);
			expertise._mount(target, anchor);
			insert(target, text2, anchor);
			projects._mount(target, anchor);
			insert(target, text3, anchor);
			workhistory._mount(target, anchor);
		},

		p: noop,

		d: function destroy(detach) {
			if (detach) {
				detachNode(text0);
			}

			intro.destroy(detach);
			if (detach) {
				detachNode(text1);
			}

			expertise.destroy(detach);
			if (detach) {
				detachNode(text2);
			}

			projects.destroy(detach);
			if (detach) {
				detachNode(text3);
			}

			workhistory.destroy(detach);
		}
	};
}

function Index(options) {
	this._debugName = '<Index>';
	if (!options || (!options.target && !options.root)) {
		throw new Error("'target' is a required option");
	}

	init(this, options);
	this._state = assign({}, options.data);
	this._intro = true;

	this._fragment = create_main_fragment$6(this, this._state);

	if (options.target) {
		var nodes = children(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(detachNode);
		this._mount(options.target, options.anchor);

		flush(this);
	}
}

assign(Index.prototype, protoDev);

Index.prototype._checkReadOnly = function _checkReadOnly(newState) {
};

export default Index;
